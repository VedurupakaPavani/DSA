class node:
    def __init__(self,key):
        self.left=None
        self.right=None
        self.key=key
class tree:
    def __init__(self):
        self.root=None
    def insert(self,key):
        self.root=self.insert_recursive(self.root,key)
    def insert_recursive(self,root,key):
        if root is None:
            return node(key)
        if key<root.key:
            root.left=self.insert_recursive(root.left,key)
        elif key>root.key:
            root.right=self.insert_recursive(root.right,key)
        return root
    def inorder(self):
        self.inorder_recursive(self.root)
    def inorder_recursive(self,root):
        if root:
            self.inorder_recursive(root.left)
            print(root.key,end=" ")
            self.inorder_recursive(root.right)
    def preorder(self):
        self.preorder_recursive(self.root)
    def preorder_recursive(self,root):
        if root:
            print(root.key,end=" ")
            self.preorder_recursive(root.left)
            self.preorder_recursive(root.right)
    def postorder(self):
        self.postorder_recursive(self.root)
    def postorder_recursive(self,root):
        if root:
            self.postorder_recursive(root.left)
            self.postorder_recursive(root.right)
            print(root.key,end=" ")
    def max(self):
        return self.max_recursive(self.root)
    def max_recursive(self,root):
        current=root
        while current.right:
            current=current.right
        return current.key
    def min(self):
        return self.min_recursive(self.root)
    def min_recursive(self,root):
        current=root
        while current.left :
            current=current.left
        return current.key
    def search(self,key):
        return self.search_recursive(self.root,key)
    def search_recursive(self,root,key):
        if not root or root.key==key:
            return root
        if key<root.key:
            return self.search_recursive(root.left,key)
        return self.search_recursive(root.right,key)
    def height(self,root):
        if not root:
            return -1
        return 1+max(self.height(root.left),self.height(root.right))
    def delete(self,key):
        self.root=self.delete_recursive(self.root,key)
    def delete_recursive(self,root,key):
        if not root:
            return root
        if key<root.key:
            root.left=self.insert_recursive(root.left,key)
        elif key>root.key:
            root.right=self.insert_recursive(root.right,key)  
        else:
            if not root.left:
                return root.right
            elif not root.right:
                return root.left
            temp=self._min_value_root(root.right) 
            root.key=temp.key
            root.right=self.delete_recursion(root.right,temp.key)
        return root     
obj=tree()
obj.insert(11)
obj.insert(8)
obj.insert(6)
obj.insert(10)
obj.insert(14)
obj.delete(10)
obj.preorder()
#obj.inorder()
# print(obj.min())
# print(obj.max())
# obj.search(6)
# print(obj.height(obj.root))
