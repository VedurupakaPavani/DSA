class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class linkedlist:
    def __init__(self):
        self.head=None
    def insert(self,data):
        newnode=node(data)
        if self.head is None:
            self.head=newnode
        else:
            newnode.next=self.head
            self.head=newnode
    def insert_end(self,data):
        newnode=node(data)
        if self.head is None:
            self.head=newnode
        else:
            current=self.head
            while current.next:
                current=current.next
                current.next=newnode
    def insert_at_position(self,data,position):
        newnode=node(data)
        if self.head is None:
            self.head=newnode
        else:
            count=0
            current=self.head
            while current:
                count+=1
                if count == position-1:
                    newnode.next=current.next
                    current.next=newnode
                current=current.next
            if count < position-1:
                self.insert_end(data)
    def search(self,key):
        current=self.head
        count=0
        while current:
            count+=1
            if current.data==key:
                print(f"{current.data} fount at the position at{count}")
                break
            current=current.next
        else:
            print('not found')
    def deletion(self,key):
        if self.head is None:
            print('list is empty')
            return 
        self.head=self.head.next

    def deletion_end(self):
        if self.head.next is None:
            print('list is empty')
            return
        current=self.head
        while current.next.next:
            current=current.next.next
        current.next=None
    def deletion_element(self,key):
        if self.head is None:
            print('list is empty')
        elif self.head.data==key:
            self.head=self.head.next
        else:
            current=self.head
            while current.next and current.next.data!=key:
                current=current.next
            if current.next is None:
                print('no data found')
                return
            current.next=current.next.next
    def reverse(self):
        prev=None
        current=self.head
        while current:
            temp=current.next
            prev=current
            current=temp
        self.head=prev
    def mid(self):
        if self.head is None:
            return 0
        count=0
        current=self.head
        while current:
            count+=1
            current=current.next
        mid=count//2
        current=self.head
        for i in range(mid):
            current=current.next
            return current.data
    def display(self):
        current=self.head
        while current:
            print(current.data,end='->')
            current=current.next

obj=linkedlist()
obj.insert(9)
obj.insert(8)
obj.insert(7)
obj.mean()
obj.display() 
