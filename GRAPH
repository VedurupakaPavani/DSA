class Graph:
    def _init_(self):
        self.graph = {}
    def addEdge(self,a,b):
        if a not in self.graph:
            self.graph[a] = []
            self.graph[a].append(b)
        else:
            self.graph[a].append(b)
    def bfs(self):   #queue
        a=self.graph
        queue = [1]
        visited = set()
        visited.add(1)
        while queue:
            curr = queue.pop(0)
            print(curr,end=" ")
            for i in a[curr]:
                if i not in visited:
                    visited.add(i)
                    queue.append(i)
    def dfs(self):   #stack
        a=self.graph
        queue = [1]
        visited = set()
        visited.add(1)
        while queue:
            curr = queue.pop()
            print(curr,end=" ")
            for i in a[curr]:
                if i not in visited:
                    visited.add(i)
                    queue.append(i)



g=Graph()
g.addEdge(1,2)
g.addEdge(1,3)
g.addEdge(2,4)
g.addEdge(3,1)
g.addEdge(4,2)
g.addEdge(3,7)
g.addEdge(7,3)

n=int(input("Enter n no of edges : "))
for i in range(n):
    # g.addEdge(int(input()),int(input()))
    a,b=map(int,input().split())
    g.addEdge(a,b)

print(g.graph)
g.dfs()
print()
g.bfs()
